/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from 'bn.js';
import type { ContractOptions } from 'web3-eth-contract';
import type { EventLog } from 'web3-core';
import type { EventEmitter } from 'events';
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types';

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminChanged = ContractEventLog<{
  previousAdmin: string;
  newAdmin: string;
  0: string;
  1: string;
}>;
export type BeaconUpgraded = ContractEventLog<{
  beacon: string;
  0: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type StakeRenewed = ContractEventLog<{
  user: string;
  buildingId: string;
  amount: string;
  stakingPeriod: string;
  startTime: string;
  itemContract: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Staked = ContractEventLog<{
  user: string;
  buildingId: string;
  amount: string;
  stakingPeriod: string;
  startTime: string;
  itemContract: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type StakingPeriodUpdated = ContractEventLog<{
  stakingPeriod: string;
  0: string;
}>;
export type Unstaked = ContractEventLog<{
  buildingId: string;
  0: string;
}>;
export type Upgraded = ContractEventLog<{
  implementation: string;
  0: string;
}>;

export interface StakingBuilding extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): StakingBuilding;
  clone(): StakingBuilding;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<boolean>;

    highestStakerOfBuilding(
      arg0: number | string | BN,
    ): NonPayableTransactionObject<string>;

    initialize(
      _admin: string,
      _nglTokenAddress: string,
      _itemTypeContract: string,
      _itemContract: string,
    ): NonPayableTransactionObject<void>;

    itemContract(): NonPayableTransactionObject<string>;

    itemTypeContract(): NonPayableTransactionObject<string>;

    nglToken(): NonPayableTransactionObject<string>;

    proxiableUUID(): NonPayableTransactionObject<string>;

    renewStake(
      _userAddress: string,
      _buildingId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string,
    ): NonPayableTransactionObject<void>;

    setStakingPeriod(
      _stakingPeriod: number | string | BN,
    ): NonPayableTransactionObject<void>;

    stake(
      _buildingId: number | string | BN,
      _amount: number | string | BN,
    ): NonPayableTransactionObject<void>;

    stakingPeriod(): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceId: string | number[],
    ): NonPayableTransactionObject<boolean>;

    unStake(
      _buildingId: number | string | BN,
    ): NonPayableTransactionObject<void>;

    upgradeTo(newImplementation: string): NonPayableTransactionObject<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: string | number[],
    ): PayableTransactionObject<void>;

    userStakeInfo(
      arg0: string,
      arg1: number | string | BN,
    ): NonPayableTransactionObject<{
      user: string;
      amount: string;
      stakingPeriod: string;
      startTime: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
  };
  events: {
    AdminChanged(cb?: Callback<AdminChanged>): EventEmitter;
    AdminChanged(
      options?: EventOptions,
      cb?: Callback<AdminChanged>,
    ): EventEmitter;

    BeaconUpgraded(cb?: Callback<BeaconUpgraded>): EventEmitter;
    BeaconUpgraded(
      options?: EventOptions,
      cb?: Callback<BeaconUpgraded>,
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>,
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>,
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>,
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>,
    ): EventEmitter;

    StakeRenewed(cb?: Callback<StakeRenewed>): EventEmitter;
    StakeRenewed(
      options?: EventOptions,
      cb?: Callback<StakeRenewed>,
    ): EventEmitter;

    Staked(cb?: Callback<Staked>): EventEmitter;
    Staked(options?: EventOptions, cb?: Callback<Staked>): EventEmitter;

    StakingPeriodUpdated(cb?: Callback<StakingPeriodUpdated>): EventEmitter;
    StakingPeriodUpdated(
      options?: EventOptions,
      cb?: Callback<StakingPeriodUpdated>,
    ): EventEmitter;

    Unstaked(cb?: Callback<Unstaked>): EventEmitter;
    Unstaked(options?: EventOptions, cb?: Callback<Unstaked>): EventEmitter;

    Upgraded(cb?: Callback<Upgraded>): EventEmitter;
    Upgraded(options?: EventOptions, cb?: Callback<Upgraded>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: 'AdminChanged', cb: Callback<AdminChanged>): void;
  once(
    event: 'AdminChanged',
    options: EventOptions,
    cb: Callback<AdminChanged>,
  ): void;

  once(event: 'BeaconUpgraded', cb: Callback<BeaconUpgraded>): void;
  once(
    event: 'BeaconUpgraded',
    options: EventOptions,
    cb: Callback<BeaconUpgraded>,
  ): void;

  once(event: 'Initialized', cb: Callback<Initialized>): void;
  once(
    event: 'Initialized',
    options: EventOptions,
    cb: Callback<Initialized>,
  ): void;

  once(event: 'RoleAdminChanged', cb: Callback<RoleAdminChanged>): void;
  once(
    event: 'RoleAdminChanged',
    options: EventOptions,
    cb: Callback<RoleAdminChanged>,
  ): void;

  once(event: 'RoleGranted', cb: Callback<RoleGranted>): void;
  once(
    event: 'RoleGranted',
    options: EventOptions,
    cb: Callback<RoleGranted>,
  ): void;

  once(event: 'RoleRevoked', cb: Callback<RoleRevoked>): void;
  once(
    event: 'RoleRevoked',
    options: EventOptions,
    cb: Callback<RoleRevoked>,
  ): void;

  once(event: 'StakeRenewed', cb: Callback<StakeRenewed>): void;
  once(
    event: 'StakeRenewed',
    options: EventOptions,
    cb: Callback<StakeRenewed>,
  ): void;

  once(event: 'Staked', cb: Callback<Staked>): void;
  once(event: 'Staked', options: EventOptions, cb: Callback<Staked>): void;

  once(event: 'StakingPeriodUpdated', cb: Callback<StakingPeriodUpdated>): void;
  once(
    event: 'StakingPeriodUpdated',
    options: EventOptions,
    cb: Callback<StakingPeriodUpdated>,
  ): void;

  once(event: 'Unstaked', cb: Callback<Unstaked>): void;
  once(event: 'Unstaked', options: EventOptions, cb: Callback<Unstaked>): void;

  once(event: 'Upgraded', cb: Callback<Upgraded>): void;
  once(event: 'Upgraded', options: EventOptions, cb: Callback<Upgraded>): void;
}
